{"version":3,"sources":["../package.json","../src/upload-builder.ts","../src/constants.ts","../src/internal/handler.ts","../src/next/core/page.ts","../next-legacy.ts"],"sourcesContent":["{\n  \"name\": \"uploadthing\",\n  \"version\": \"4.1.3\",\n  \"license\": \"MIT\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \"./client\": {\n      \"import\": \"./dist/client.mjs\",\n      \"types\": \"./dist/client.d.ts\"\n    },\n    \"./server\": {\n      \"import\": \"./dist/server.mjs\",\n      \"types\": \"./dist/server.d.ts\",\n      \"default\": \"./dist/server.mjs\"\n    },\n    \"./next\": {\n      \"import\": \"./dist/next.mjs\",\n      \"types\": \"./dist/next.d.ts\"\n    },\n    \"./next-legacy\": {\n      \"import\": \"./dist/next-legacy.mjs\",\n      \"types\": \"./dist/next-legacy.d.ts\"\n    }\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"dist/*\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"lint\": \"eslint \\\"**/*.{ts,tsx}\\\" --max-warnings 0\",\n    \"build\": \"tsup\",\n    \"clean\": \"git clean -xdf dist node_modules\",\n    \"dev\": \"tsup --watch\",\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@uploadthing/mime-types\": \"^0.2.0\",\n    \"@uploadthing/shared\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@uploadthing/eslint-config\": \"0.1.0\",\n    \"@uploadthing/tsconfig\": \"0.1.0\",\n    \"@uploadthing/tsup-config\": \"0.1.0\",\n    \"eslint\": \"^8.42.0\",\n    \"next\": \"13.4.4\",\n    \"tsup\": \"6.7.0\",\n    \"type-fest\": \"^3.11.1\",\n    \"typescript\": \"5.1.3\",\n    \"vitest\": \"^0.30.1\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n","import type { FileRouterInputConfig } from \"@uploadthing/shared\";\n\nimport type {\n  AnyRuntime,\n  UnsetMarker,\n  UploadBuilder,\n  UploadBuilderDef,\n  Uploader,\n} from \"./internal/types\";\n\nfunction internalCreateBuilder<TRuntime extends AnyRuntime = \"web\">(\n  initDef: Partial<UploadBuilderDef<TRuntime>> = {},\n): UploadBuilder<{\n  _metadata: UnsetMarker;\n  _runtime: TRuntime;\n}> {\n  const _def: UploadBuilderDef<TRuntime> = {\n    // Default router config\n    routerConfig: {\n      image: {\n        maxFileSize: \"4MB\",\n      },\n    },\n\n    middleware: () => ({}),\n\n    // Overload with properties passed in\n    ...initDef,\n  };\n\n  return {\n    middleware(userMiddleware) {\n      return internalCreateBuilder({\n        ..._def,\n        middleware: userMiddleware,\n      }) as UploadBuilder<{ _metadata: any; _runtime: TRuntime }>;\n    },\n    onUploadComplete(userUploadComplete) {\n      return {\n        _def,\n        resolver: userUploadComplete,\n      } as Uploader<{ _metadata: any; _runtime: TRuntime }>;\n    },\n  };\n}\n\ntype InOut<TRuntime extends AnyRuntime = \"web\"> = (\n  input: FileRouterInputConfig,\n) => UploadBuilder<{\n  _metadata: UnsetMarker;\n  _runtime: TRuntime;\n}>;\n\nexport function createBuilder<\n  TRuntime extends AnyRuntime = \"web\",\n>(): InOut<TRuntime> {\n  return (input: FileRouterInputConfig) => {\n    return internalCreateBuilder<TRuntime>({ routerConfig: input });\n  };\n}\n","import type { PackageJson } from \"type-fest\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst packageJson = require(\"../package.json\") as PackageJson;\nif (!packageJson.version) throw new Error(\"no version found in package.json\");\nexport const UPLOADTHING_VERSION = packageJson.version;\n","import type { NextApiResponse } from \"next\";\n\nimport {\n  generateUploadThingURL,\n  getTypeFromFileName,\n  getUploadthingUrl,\n  fillInputRouteConfig as parseAndExpandInputConfig,\n  pollForFileData,\n} from \"@uploadthing/shared\";\nimport type {\n  ExpandedRouteConfig,\n  FileData,\n  FileRouterInputKey,\n  UploadedFile,\n} from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport type { AnyRuntime, FileRouter } from \"./types\";\n\nconst fileCountLimitHit = (\n  files: string[],\n  routeConfig: ExpandedRouteConfig,\n) => {\n  const counts: { [k: string]: number } = {};\n\n  files.forEach((file) => {\n    const type = getTypeFromFileName(\n      file,\n      Object.keys(routeConfig) as FileRouterInputKey[],\n    ) as FileRouterInputKey;\n\n    if (!counts[type]) {\n      counts[type] = 1;\n    } else {\n      counts[type] += 1;\n    }\n  });\n\n  return Object.keys(counts).some((key) => {\n    const count = counts[key as FileRouterInputKey];\n    if (count === 0) return false;\n\n    const limit = routeConfig[key as FileRouterInputKey]?.maxFileCount;\n    if (!limit) {\n      console.error(routeConfig, key);\n      throw new Error(\"invalid config during file count\");\n    }\n\n    return count > limit;\n  });\n};\n\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"[UT] UploadThing dev server is now running!\");\n}\n\nconst isValidResponse = (response: Response) => {\n  if (!response.ok) return false;\n  if (response.status >= 400) return false;\n  if (!response.headers.has(\"x-uploadthing-version\")) return false;\n\n  return true;\n};\n\nconst conditionalDevServer = async (fileKey: string) => {\n  if (process.env.NODE_ENV !== \"development\") return;\n\n  const fileData = await pollForFileData(\n    fileKey,\n    async (json: { fileData: FileData }) => {\n      const file = json.fileData;\n\n      let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n      if (!callbackUrl.startsWith(\"http\"))\n        callbackUrl = \"http://\" + callbackUrl;\n\n      console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n\n      const response = await fetch(callbackUrl, {\n        method: \"POST\",\n        body: JSON.stringify({\n          status: \"uploaded\",\n          metadata: JSON.parse(file.metadata ?? \"{}\") as FileData[\"metadata\"],\n          file: {\n            url: `https://uploadthing.com/f/${encodeURIComponent(\n              fileKey ?? \"\",\n            )}`,\n            key: fileKey ?? \"\",\n            name: file.fileName,\n          },\n        }),\n        headers: {\n          \"uploadthing-hook\": \"callback\",\n        },\n      });\n      if (isValidResponse(response)) {\n        console.log(\"[UT] Successfully simulated callback for file\", fileKey);\n      } else {\n        console.error(\n          \"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\",\n          fileKey,\n        );\n      }\n      return file;\n    },\n  );\n\n  if (fileData !== null) return fileData;\n\n  console.error(`[UT] Failed to simulate callback for file ${fileKey}`);\n  throw new Error(\"File took too long to upload\");\n};\n\nexport type RouterWithConfig<TRouter extends FileRouter> = {\n  router: TRouter;\n  config?: {\n    callbackUrl?: string;\n    uploadthingId?: string;\n    uploadthingSecret?: string;\n  };\n};\n\nexport const buildRequestHandler = <\n  TRouter extends FileRouter,\n  TRuntime extends AnyRuntime,\n>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  return async (input: {\n    uploadthingHook?: string;\n    slug?: string;\n    actionType?: string;\n    req: Partial<Request> & { json: Request[\"json\"] };\n    res?: TRuntime extends \"pages\" ? NextApiResponse : undefined;\n  }) => {\n    const { router, config } = opts;\n    const preferredOrEnvSecret =\n      config?.uploadthingSecret ?? process.env.UPLOADTHING_SECRET;\n    const { uploadthingHook, slug, req, res, actionType } = input;\n\n    if (!slug) throw new Error(\"we need a slug\");\n\n    if (!preferredOrEnvSecret) {\n      throw new Error(\n        `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n      );\n    }\n\n    const uploadable = router[slug];\n    if (!uploadable) {\n      return { status: 404 };\n    }\n\n    const reqBody = (await req.json()) as {\n      file: UploadedFile;\n      files: unknown;\n      metadata: Record<string, unknown>;\n    };\n\n    if (uploadthingHook && uploadthingHook === \"callback\") {\n      // This is when we receive the webhook from uploadthing\n      await uploadable.resolver({\n        file: reqBody.file,\n\n        metadata: reqBody.metadata,\n      });\n\n      return { status: 200 };\n    }\n\n    if (!actionType || actionType !== \"upload\") {\n      // This would either be someone spamming\n      // or the AWS webhook\n\n      return { status: 404 };\n    }\n\n    try {\n      const { files } = reqBody as { files: string[] };\n      // @ts-expect-error TODO: Fix this\n      const metadata = await uploadable._def.middleware(req, res);\n\n      // Validate without Zod (for now)\n      if (!Array.isArray(files) || !files.every((f) => typeof f === \"string\"))\n        throw new Error(\"Need file array\");\n\n      // FILL THE ROUTE CONFIG so the server only has one happy path\n      const parsedConfig = parseAndExpandInputConfig(\n        uploadable._def.routerConfig,\n      );\n\n      const limitHit = fileCountLimitHit(files, parsedConfig);\n\n      if (limitHit) throw new Error(\"Too many files\");\n\n      const uploadthingApiResponse = await fetch(\n        generateUploadThingURL(\"/api/prepareUpload\"),\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            files: files,\n\n            routeConfig: parsedConfig,\n\n            metadata,\n            callbackUrl: config?.callbackUrl ?? getUploadthingUrl(),\n            callbackSlug: slug,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-uploadthing-api-key\": preferredOrEnvSecret,\n            \"x-uploadthing-version\": UPLOADTHING_VERSION,\n          },\n        },\n      );\n\n      if (!uploadthingApiResponse.ok) {\n        console.error(\"[UT] unable to get presigned urls\");\n        try {\n          const error = (await uploadthingApiResponse.json()) as unknown;\n          console.error(error);\n        } catch (e) {\n          console.error(\"[UT] unable to parse response\");\n        }\n        throw new Error(\"ending upload\");\n      }\n\n      // This is when we send the response back to the user's form so they can submit the files\n      const parsedResponse = (await uploadthingApiResponse.json()) as {\n        presignedUrl: { url: string; fields: Record<string, string> }; // ripped type from S3 package\n        name: string;\n        key: string;\n      }[];\n\n      if (process.env.NODE_ENV === \"development\") {\n        for (const file of parsedResponse) {\n          void conditionalDevServer(file.key);\n        }\n      }\n\n      return { body: parsedResponse, status: 200 };\n    } catch (e) {\n      console.error(\"[UT] middleware failed to run\");\n      console.error(e);\n\n      return { status: 400, message: (e as Error).toString() };\n    }\n  };\n};\n\nexport const buildPermissionsInfoHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  return () => {\n    const r = opts.router;\n\n    const permissions = Object.keys(r).map((k) => {\n      const route = r[k];\n      const config = parseAndExpandInputConfig(route._def.routerConfig);\n      return {\n        slug: k as keyof TRouter,\n        config,\n      };\n    });\n\n    return permissions;\n  };\n};\n","import type { NextApiRequest, NextApiResponse } from \"next\";\n\nimport { UPLOADTHING_VERSION } from \"../../constants\";\nimport type { RouterWithConfig } from \"../../internal/handler\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"../../internal/handler\";\nimport type { FileRouter } from \"../../internal/types\";\n\nexport const createNextPageApiHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  const requestHandler = buildRequestHandler<TRouter, \"pages\">(opts);\n\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n    // Return valid endpoints\n    if (req.method === \"GET\") {\n      const perms = getBuildPerms();\n      res.status(200).json(perms);\n      return;\n    }\n\n    // Get inputs from query and params\n    const params = req.query;\n    const uploadthingHook = req.headers[\"uploadthing-hook\"];\n    const slug = params[\"slug\"];\n    const actionType = params[\"actionType\"];\n\n    // Validate inputs\n    if (slug && typeof slug !== \"string\")\n      return res.status(400).send(\"`slug` must not be an array\");\n    if (actionType && typeof actionType !== \"string\")\n      return res.status(400).send(\"`actionType` must not be an array\");\n    if (uploadthingHook && typeof uploadthingHook !== \"string\")\n      return res.status(400).send(\"`uploadthingHook` must not be an array\");\n    if (typeof req.body !== \"string\")\n      return res.status(400).send(\"Request body must be a JSON string\");\n\n    const standardRequest = {\n      ...req,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      json: () => Promise.resolve(JSON.parse(req.body)),\n      headers: {\n        get: (key: string) => req.headers[key],\n      } as Headers,\n    };\n\n    const response = await requestHandler({\n      uploadthingHook,\n      slug,\n      actionType,\n      req: standardRequest,\n      res,\n    });\n\n    res.status(response.status);\n    res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n    if (response.status === 200) {\n      return res.json(response.body);\n    }\n    return res.send(response.message ?? \"Unable to upload file.\");\n  };\n};\n","import { createBuilder } from \"./src/upload-builder\";\n\nexport { createNextPageApiHandler } from \"./src/next/core/page\";\nexport type { FileRouter } from \"./src/internal/types\";\n\nexport const createUploadthing = () => createBuilder<\"pages\">();\n"],"mappings":"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","names":[]}
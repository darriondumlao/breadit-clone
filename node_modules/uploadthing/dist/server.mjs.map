{"version":3,"sources":["../package.json","../src/upload-builder.ts","../src/internal/types.ts","../src/helper-functions.ts","../src/constants.ts","../server.ts"],"sourcesContent":["{\n  \"name\": \"uploadthing\",\n  \"version\": \"4.1.3\",\n  \"license\": \"MIT\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \"./client\": {\n      \"import\": \"./dist/client.mjs\",\n      \"types\": \"./dist/client.d.ts\"\n    },\n    \"./server\": {\n      \"import\": \"./dist/server.mjs\",\n      \"types\": \"./dist/server.d.ts\",\n      \"default\": \"./dist/server.mjs\"\n    },\n    \"./next\": {\n      \"import\": \"./dist/next.mjs\",\n      \"types\": \"./dist/next.d.ts\"\n    },\n    \"./next-legacy\": {\n      \"import\": \"./dist/next-legacy.mjs\",\n      \"types\": \"./dist/next-legacy.d.ts\"\n    }\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"dist/*\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"lint\": \"eslint \\\"**/*.{ts,tsx}\\\" --max-warnings 0\",\n    \"build\": \"tsup\",\n    \"clean\": \"git clean -xdf dist node_modules\",\n    \"dev\": \"tsup --watch\",\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@uploadthing/mime-types\": \"^0.2.0\",\n    \"@uploadthing/shared\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@uploadthing/eslint-config\": \"0.1.0\",\n    \"@uploadthing/tsconfig\": \"0.1.0\",\n    \"@uploadthing/tsup-config\": \"0.1.0\",\n    \"eslint\": \"^8.42.0\",\n    \"next\": \"13.4.4\",\n    \"tsup\": \"6.7.0\",\n    \"type-fest\": \"^3.11.1\",\n    \"typescript\": \"5.1.3\",\n    \"vitest\": \"^0.30.1\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n","import type { FileRouterInputConfig } from \"@uploadthing/shared\";\n\nimport type {\n  AnyRuntime,\n  UnsetMarker,\n  UploadBuilder,\n  UploadBuilderDef,\n  Uploader,\n} from \"./internal/types\";\n\nfunction internalCreateBuilder<TRuntime extends AnyRuntime = \"web\">(\n  initDef: Partial<UploadBuilderDef<TRuntime>> = {},\n): UploadBuilder<{\n  _metadata: UnsetMarker;\n  _runtime: TRuntime;\n}> {\n  const _def: UploadBuilderDef<TRuntime> = {\n    // Default router config\n    routerConfig: {\n      image: {\n        maxFileSize: \"4MB\",\n      },\n    },\n\n    middleware: () => ({}),\n\n    // Overload with properties passed in\n    ...initDef,\n  };\n\n  return {\n    middleware(userMiddleware) {\n      return internalCreateBuilder({\n        ..._def,\n        middleware: userMiddleware,\n      }) as UploadBuilder<{ _metadata: any; _runtime: TRuntime }>;\n    },\n    onUploadComplete(userUploadComplete) {\n      return {\n        _def,\n        resolver: userUploadComplete,\n      } as Uploader<{ _metadata: any; _runtime: TRuntime }>;\n    },\n  };\n}\n\ntype InOut<TRuntime extends AnyRuntime = \"web\"> = (\n  input: FileRouterInputConfig,\n) => UploadBuilder<{\n  _metadata: UnsetMarker;\n  _runtime: TRuntime;\n}>;\n\nexport function createBuilder<\n  TRuntime extends AnyRuntime = \"web\",\n>(): InOut<TRuntime> {\n  return (input: FileRouterInputConfig) => {\n    return internalCreateBuilder<TRuntime>({ routerConfig: input });\n  };\n}\n","import type { NextApiRequest, NextApiResponse } from \"next\";\nimport type { NextRequest } from \"next/server\";\n\nimport type { FileRouterInputConfig, UploadedFile } from \"@uploadthing/shared\";\n\n// Utils\nexport const unsetMarker = \"unsetMarker\" as \"unsetMarker\" & {\n  __brand: \"unsetMarker\";\n};\nexport type UnsetMarker = typeof unsetMarker;\n\ntype Simplify<TType> = { [TKey in keyof TType]: TType[TKey] } & {};\n\ntype ResolverOptions<TParams extends AnyParams> = {\n  metadata: Simplify<\n    TParams[\"_metadata\"] extends UnsetMarker ? undefined : TParams[\"_metadata\"]\n  >;\n\n  file: UploadedFile;\n};\n\nexport type MaybePromise<TType> = TType | Promise<TType>;\n\n// Package\nexport type AnyRuntime = \"app\" | \"pages\" | \"web\";\nexport interface AnyParams {\n  _metadata: any; // imaginary field used to bind metadata return type to an Upload resolver\n  _runtime: any;\n}\n\ntype MiddlewareFnArgs<TRuntime> = TRuntime extends \"web\"\n  ? { req: Request; res: never }\n  : TRuntime extends \"app\"\n  ? { req: NextRequest; res: never }\n  : { req: NextApiRequest; res: NextApiResponse };\n\ntype MiddlewareFn<\n  TOutput extends Record<string, unknown>,\n  TRuntime extends string,\n> = MiddlewareFnArgs<TRuntime>[\"res\"] extends never\n  ? (req: MiddlewareFnArgs<TRuntime>[\"req\"]) => MaybePromise<TOutput>\n  : (\n      req: MiddlewareFnArgs<TRuntime>[\"req\"],\n      res: MiddlewareFnArgs<TRuntime>[\"res\"],\n    ) => MaybePromise<TOutput>;\n\nexport type ReqMiddlewareFn<TOutput extends Record<string, unknown>> =\n  MiddlewareFn<TOutput, \"web\">;\nexport type NextReqMiddlewareFn<TOutput extends Record<string, unknown>> =\n  MiddlewareFn<TOutput, \"app\">;\nexport type NextApiMiddlewareFn<TOutput extends Record<string, unknown>> =\n  MiddlewareFn<TOutput, \"pages\">;\n\ntype ResolverFn<TParams extends AnyParams> = (\n  opts: ResolverOptions<TParams>,\n) => MaybePromise<void>;\n\nexport interface UploadBuilder<TParams extends AnyParams> {\n  middleware: <TOutput extends Record<string, unknown>>(\n    fn: MiddlewareFn<TOutput, TParams[\"_runtime\"]>,\n  ) => UploadBuilder<{\n    _metadata: TOutput;\n    _runtime: TParams[\"_runtime\"];\n  }>;\n\n  onUploadComplete: (fn: ResolverFn<TParams>) => Uploader<TParams>;\n}\n\nexport type UploadBuilderDef<TRuntime extends AnyRuntime> = {\n  routerConfig: FileRouterInputConfig;\n  middleware: MiddlewareFn<{}, TRuntime>;\n};\n\nexport interface Uploader<TParams extends AnyParams> {\n  _def: TParams & UploadBuilderDef<TParams[\"_runtime\"]>;\n  resolver: ResolverFn<TParams>;\n}\n\nexport type FileRouter<TParams extends AnyParams = AnyParams> = Record<\n  string,\n  Uploader<TParams>\n>;\n","import { generateUploadThingURL } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\n\nconst UT_SECRET = process.env.UPLOADTHING_SECRET;\n\n/**\n * Request to delete files from UploadThing storage.\n * @param {string | string[]} fileKeys\n * @example\n * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n * @example\n * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n */\nexport const deleteFiles = async (fileKeys: string[] | string) => {\n  if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n  if (!UT_SECRET) throw new Error(\"Missing UPLOADTHING_SECRET env variable.\");\n\n  const res = await fetch(generateUploadThingURL(\"/api/deleteFile\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": UT_SECRET,\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ fileKeys }),\n  });\n  if (!res.ok) {\n    throw new Error(\"Failed to delete files\");\n  }\n  return res.json() as Promise<{ success: boolean }>;\n};\n\n/**\n * Request file URLs from UploadThing storage.\n * @param {string | string[]} fileKeys\n * @example\n * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n *\n * @example\n * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n */\nexport const getFileUrls = async (fileKeys: string[] | string) => {\n  if (!Array.isArray(fileKeys)) fileKeys = [fileKeys];\n  if (!UT_SECRET) throw new Error(\"Missing UPLOADTHING_SECRET env variable.\");\n\n  const res = await fetch(generateUploadThingURL(\"/api/getFileUrl\"), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": UT_SECRET,\n      \"x-uploadthing-version\": UPLOADTHING_VERSION,\n    },\n    body: JSON.stringify({ fileKeys }),\n  });\n  if (!res.ok) {\n    throw new Error(\"Failed to get file urls\");\n  }\n  return res.json().then(({ data }) => data as { key: string; url: string }[]);\n};\n","import type { PackageJson } from \"type-fest\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst packageJson = require(\"../package.json\") as PackageJson;\nif (!packageJson.version) throw new Error(\"no version found in package.json\");\nexport const UPLOADTHING_VERSION = packageJson.version;\n","import { createBuilder } from \"./src/upload-builder\";\n\nexport * from \"./src/internal/types\";\nexport * as utapi from \"./src/helper-functions\";\n\nexport const createUploadthing = () => createBuilder<\"web\">();\n"],"mappings":"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","names":[]}
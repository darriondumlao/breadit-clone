import { NextApiRequest, NextApiResponse } from 'next';
import { NextRequest } from 'next/server';
import { FileRouterInputConfig, UploadedFile } from '@uploadthing/shared';

declare const unsetMarker: "unsetMarker" & {
    __brand: "unsetMarker";
};
type UnsetMarker = typeof unsetMarker;
type Simplify<TType> = {
    [TKey in keyof TType]: TType[TKey];
} & {};
type ResolverOptions<TParams extends AnyParams> = {
    metadata: Simplify<TParams["_metadata"] extends UnsetMarker ? undefined : TParams["_metadata"]>;
    file: UploadedFile;
};
type MaybePromise<TType> = TType | Promise<TType>;
type AnyRuntime = "app" | "pages" | "web";
interface AnyParams {
    _metadata: any;
    _runtime: any;
}
type MiddlewareFnArgs<TRuntime> = TRuntime extends "web" ? {
    req: Request;
    res: never;
} : TRuntime extends "app" ? {
    req: NextRequest;
    res: never;
} : {
    req: NextApiRequest;
    res: NextApiResponse;
};
type MiddlewareFn<TOutput extends Record<string, unknown>, TRuntime extends string> = MiddlewareFnArgs<TRuntime>["res"] extends never ? (req: MiddlewareFnArgs<TRuntime>["req"]) => MaybePromise<TOutput> : (req: MiddlewareFnArgs<TRuntime>["req"], res: MiddlewareFnArgs<TRuntime>["res"]) => MaybePromise<TOutput>;
type ReqMiddlewareFn<TOutput extends Record<string, unknown>> = MiddlewareFn<TOutput, "web">;
type NextReqMiddlewareFn<TOutput extends Record<string, unknown>> = MiddlewareFn<TOutput, "app">;
type NextApiMiddlewareFn<TOutput extends Record<string, unknown>> = MiddlewareFn<TOutput, "pages">;
type ResolverFn<TParams extends AnyParams> = (opts: ResolverOptions<TParams>) => MaybePromise<void>;
interface UploadBuilder<TParams extends AnyParams> {
    middleware: <TOutput extends Record<string, unknown>>(fn: MiddlewareFn<TOutput, TParams["_runtime"]>) => UploadBuilder<{
        _metadata: TOutput;
        _runtime: TParams["_runtime"];
    }>;
    onUploadComplete: (fn: ResolverFn<TParams>) => Uploader<TParams>;
}
type UploadBuilderDef<TRuntime extends AnyRuntime> = {
    routerConfig: FileRouterInputConfig;
    middleware: MiddlewareFn<{}, TRuntime>;
};
interface Uploader<TParams extends AnyParams> {
    _def: TParams & UploadBuilderDef<TParams["_runtime"]>;
    resolver: ResolverFn<TParams>;
}
type FileRouter<TParams extends AnyParams = AnyParams> = Record<string, Uploader<TParams>>;

export { AnyRuntime as A, FileRouter as F, MaybePromise as M, NextReqMiddlewareFn as N, ReqMiddlewareFn as R, UploadBuilder as U, UnsetMarker as a, AnyParams as b, NextApiMiddlewareFn as c, UploadBuilderDef as d, Uploader as e, unsetMarker as u };
